#!/usr/bin/env python
# ... or for debugging, use something like
#!/home/stephen/bin/gdbrun python

# Compiler wrapper for libcrunch.
import os, sys, re, subprocess, tempfile

# to find liballocs, we can either
# - use the python path
# - use ../liballocs from the toplevel dir
# - use the LIBALLOCS env var
if "LIBALLOCS" in os.environ:
    liballocs_base = os.path.realpath(os.environ["LIBALLOCS"])
else:
    liballocs_base = os.path.realpath(os.path.dirname(sys.argv[0]) + "/../../../../liballocs/")
sys.path.append(liballocs_base + "/tools")
sys.path.append(liballocs_base + "/tools/lang/c/lib")
from allocscc import AllocsCC

class CrunchCC(AllocsCC):
    
    def getIncludeArgs(self, sourceFiles):
        # PROBLEM: if we have a mixture of C and preprocessed-but-non-C, this will break.
        return AllocsCC.getIncludeArgs(self, sourceFiles) + \
             (["-I" + self.getLibAllocsBaseDir() + "/include", \
                "-include", self.getLibAllocsBaseDir() + "/contrib/liballocstool/include/uniqtype-defs.h", \
                 "-include", \
                os.path.dirname(__file__) + "/../../../include/libcrunch_cil_inlines.h"] \
                  if (len(sourceFiles) > 0 and self.areAllSourceFilesC(sourceFiles)) else [])
        
    def getCillyArgs(self, sourceFiles):
        # PROBLEM: if we have a mixture of C and non-C, this will break.
        return AllocsCC.getCillyArgs(self, sourceFiles) + \
            ["--keepunused"] \
            + (["--load=%s" % (os.path.dirname(sys.argv[0]) + "/../dumpreftypes/dumpreftypes.cmxs"),  "--dodumpreftypes", \
               "--load=%s" % (os.path.dirname(sys.argv[0]) + "/../trumptr/trumptr.cmxs"), \
               "--dotrumptr" \
             ] if (len(sourceFiles) > 0 and self.areAllSourceFilesC(sourceFiles)) else []) + \
            ["-Wno-unused-variable", "-Wno-unused-label"]
            # We need the above -Wno-unused-... because CIL creates
            # some unused stuff (unavoidably, I believe) which will
            # make compilation done with -Werror barf if we don't
            # silence them.
    
    def getLibNameStem(self):
        return "crunch"
    
    def getDummyWeakObjectNameStem(self):
        return "stubs"
     
    def getLinkPath(self):
        return os.path.dirname(__file__) + "/../../../lib"

if __name__ == '__main__':
    wrapper = CrunchCC()
    ret = wrapper.main()
    exit(ret)

