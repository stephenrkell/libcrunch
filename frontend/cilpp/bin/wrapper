#!/bin/bash
# FIXME: rewrite this in C, or at least as a POSIX shell script.

# Using gcc's -wrapper option, the compiler driver will invoke
# us instead of cpp, cc1, etc., with the full command path as
# $1. We want to substitute cilpp in the right places.
# NOTE: this whole thing is necessary only because the driver
# does not want to run `cpp' ever... it uses cc1 -E.
#
# clang does not (last I checked) support -wrapper, but I
# imagine it's only a matter of time.

# If we are symlinked under a name ending '-cflags', '-cppflags',
# '-ldflags' etc, we print out the options that one should pass
# to the compiler for the wrapper to be employed. So you can do
#
# gcc `/path/to/cilpp/cilpp-cflags` <... normal gcc args...>
#
# to run with cilpp.
case "$0" in
    (*cflags|*cppflags)
        /bin/echo -no-integrated-cpp -wrapper "$(readlink -f "$(dirname "$0")")"/wrapper
        exit 0
    ;;
    (*ldflags)
        # we don't interfere with linking, so no extra ldflags
        exit 0
    ;;
    (*) # silently continue, i.e. actually act as the wrapper command
    ;;
esac

debug_print () {
    lvl="$1"
    shift
    if [[ "$DEBUG_CC" -ge $lvl ]]; then
        echo "$@"
    fi
}

is_pp () {
    saw_pp=0
    outpos=0
    while shift; do
        ctr="$(( $ctr + 1 ))"
        if [[ -z "$1" ]]; then continue; fi
        case "$1" in
         (-o) outfile="$2"; outpos="$(( $ctr + 1 ))";;
         (-E) saw_pp=1 ;;
        esac
    done
    # if we're only preprocessing, or if we have no explicit output file, just run cc1
    if [ "$saw_pp" -eq 0 ] || [ $outpos -eq 0 ]; then false; else true; fi
}

run_with_replacement_outfile () {
    replacement="$1"
    declare -a args
    ctr=0
    while shift; do
        ctr="$(( $ctr + 1 ))"
        if [[ -z "$1" ]]; then continue; fi
        case "$1" in
         (-o) args[$ctr]="$1"; args[$(( $ctr + 1 ))]="$replacement"; shift; ctr="$(( $ctr + 1 ))" ;;
         (*)  args[$ctr]="$1" ;;
        esac
    done
    debug_print 1 "Running + replacement outfile: ${args[@]}" 1>&2
    "${args[@]}"
}

run_with_replacement_infile () {
    # We are running cpp
    # PROBLEM: how do we identify the input filename?
    # Doing this generally means understanding cpp's entire command-line syntax.
    # We instead use a HACK:
    # for gcc we only need understand the options -E -quiet -imultiarch x86_64-linux-gnu
    # ... which (1) come first, and (2) cpp *doesn't* understand.
    replacement="$1"
    debug_print 1 "Trying to replace input file given args: $@" 1>&2
    shift
    declare -a args
    args[1]="$1"
    ctr=2
    orig_infile=""
    must_read_arg=""
    handle_possible_infile () {
        if [[ -z "$orig_infile" ]]; then
            debug_print 1 "We think the input file is $1" 1>&2
            orig_infile="$1";
            args[$ctr]="$replacement"
        else
            args[$ctr]="$1"
        fi
    }
    while shift; do
        ctr="$(( $ctr + 1 ))"
        if [[ -n "$must_read_arg" ]]; then
            args[$ctr]="$1"
            must_read_arg=""
            continue
        fi
        if [[ -z "$1" ]]; then continue; fi
        case "$1" in
            (-E|-quiet) ;; # skip it!
            (-D|-U|-include) must_read_arg=1; args[$ctr]="$1" ;;
            (-imultiarch) shift || break ;; # skip it and its arg!
            (--) no_more_options=1 ;;
            (-*) if [[ -z "$no_more_options" ]]; then args[$ctr]="$1"; else handle_possible_infile "$1"; fi ;;
            (*) handle_possible_infile "$1" ;;
        esac
    done
    debug_print 1 "Running + replacement infile ($replacement): ${args[@]}" 1>&2
    "${args[@]}"
}

debug_print 1 "\$1 is $1" 1>&2

cmd_to_run="$1"
case "$cmd_to_run" in
    (*/cc1)
        ctr=0
        # if we're only preprocessing, or if we have no explicit output file, just run cc1
        if ! is_pp "$@"; then
            debug_print 1 "We think we don't have to substitute preprocessing." 1>&2
            debug_print 1 "Running non-substituted: $@" 1>&2
            exec "$@"
        else
            # run cilpp, which should take care of the temporary file thing
            driver="$(readlink /proc/$PPID/exe)"
            debug_print 1 "driver binary is probably $driver" 1>&2
            debug_print 1 "outpos is $outpos" 1>&2
            debug_print 1 "outfile is $outfile" 1>&2
            # do the cpp, then run CIL
            debug_print 1 "We think we do have to substitute preprocessing; args $@" 1>&2
            #shift # get rid of the cc1 "argument"
            #run_with_replacement_infile "$tmpfile"
            declare -a cpp_options
            cpp_options[0]="-driver"
            cpp_options[1]="$driver"
            ctr=2
            while shift || break; do
                debug_print 1 "\$# is $#, \$1 is '$1'" 1>&2
                case "$1" in
                    # filter out non-cpp args
                    ("-imultiarch") shift || break ;; # skip arg too
                    ("-quiet") ;; # skip just it
                    ('') ;; # FIXME: this shouldn't happen!
                    (*)
                        debug_print 1 "Snarfing $1" 1>&2
                        cpp_options[$ctr]="$1"
                        ctr=$(( $ctr + 1)) 
                    ;;
                esac
            done
            
            debug_print 1 "$(dirname "$0")"/cilpp "${cpp_options[@]}" 1>&2
            exec "$(dirname "$0")"/cilpp "${cpp_options[@]}"
            #exec "$cmd_to_run" "$@"
            #
            #tmpfile="$(mktemp)" || exit 1
            #debug_print 1 "Substituted $tmpfile in place of $outfile" 1>&2
            #run_with_replacement_outfile "$tmpfile" "$@" && \
        fi
        ;;
    (*) debug_print 1 "Non-wrapping: $@" 1>&2
        exec "$@"
        ;;
esac
